/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import controller.LoginController;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import model.Bloqueo;
import model.Recuperacion;
import model.Usb;
import model.md5;
import persistent.Control;
import utility.LoadImage;

/**
 *
 * @author metallica
 */
public class SplashView extends javax.swing.JFrame implements Runnable{
    /**
     * Creates new form SplashView
     */
    public SplashView() {
        initComponents();
        lblLogo.setIcon(new LoadImage("/Asset/logoK12.jpeg", lblLogo.getSize().height, lblLogo.getSize().width).getImg());
        lblLogo.setLocation(jPanel1.getX()/2, jPanel1.getY()/2);
        new Thread(this).start();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        pgBar = new javax.swing.JProgressBar();
        lblLogo = new javax.swing.JLabel();
        lblLoad = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("K12");
        setLocation(new java.awt.Point(0, 0));
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(16, 14, 15));

        pgBar.setBackground(new java.awt.Color(16, 14, 15));
        pgBar.setForeground(new java.awt.Color(255, 255, 255));

        lblLogo.setText("jLabel2");

        lblLoad.setForeground(new java.awt.Color(255, 255, 255));
        lblLoad.setText("Cargando");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pgBar, javax.swing.GroupLayout.PREFERRED_SIZE, 720, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLoad))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(lblLoad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pgBar, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SplashView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SplashView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SplashView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SplashView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SplashView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblLoad;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JProgressBar pgBar;
    // End of variables declaration//GEN-END:variables

    
    
    public boolean verifyConexion(){
        try{
            EntityManagerFactory manager=Persistence.createEntityManagerFactory("JpaBoutique");
            EntityManager conexion=manager.createEntityManager();
            
        }catch(Exception e){
            System.out.println(e);
            int respuesta=JOptionPane.showConfirmDialog(
                            rootPane, 
                            "No se pudo establecer conexión, reconectar?",
                            "Error de Conexión",
                            JOptionPane.YES_NO_OPTION
                    );
                    if(respuesta==0) verifyConexion();
                    else System.exit(0);
        }
        if(((Bloqueo)new Control().bloqueo.findBloqueo(1)).getVal()==3){
            JOptionPane.showMessageDialog(rootPane, "Sistema bloqueado permanentemente");
            return false;
        }
        return true;
    }
    @Override
    public void run() {
        int r=1;
        if(!verifyConexion()){
            Control c=new Control();
            boolean active=false;
            List<Recuperacion>lr=c.recuperacion.findRecuperacionEntities();
            while(!active){
                List<Usb>l=Usb.getUSBDevices();
                for(Recuperacion i : lr){
                    for(Usb q : l){
                        if(i.getLlave().equals(md5.getMD5Hash(q.getUUID()))){
                            Bloqueo b=c.bloqueo.findBloqueo(1);
                            b.setVal(0);
                            b.setFechaA(null);
                            try {
                                c.bloqueo.edit(b);
                                JOptionPane.showMessageDialog(rootPane, "Sistema Desbloqueado");
                                active=true;
                                break;
                            } catch (Exception ex) {
                                Logger.getLogger(SplashView.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                    if(active) break;
                }
            }
        }
        try{
            for(int i=0;i<=100;i++){
                Thread.sleep(30);
                switch (r) {
                    case 1:
                        lblLoad.setText("Cargando.");       
                        System.out.println("Cargando.");
                        break;
                    case 2:
                        lblLoad.setText("Cargando..");
                        System.out.println("Cargando..");
                        break;
                    case 3:
                        lblLoad.setText("Cargando...");       
                        System.out.println("Cargando...");
                        break;
                }
                r=r<4 ? ++r : 1;
                pgBar.setValue(i*2);
            }
            dispose();
            LoginView login=new LoginView();
            login.setVisible(true);
            new LoginController(login);
        }catch(Exception e){
            System.out.println(e);
        }       
    }
    
    void isConnect(){
        Control a=new Control();
    }

}
